{
  "info": {
    "name": "Vendor Payment Management API",
    "description": "Complete API collection for testing vendor and payment endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api/v1"
    },
    {
      "key": "auth_token",
      "value": ""
    },
    {
      "key": "vendor_id",
      "value": ""
    },
    {
      "key": "payment_id",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
            },
            "url": "{{base_url}}/auth/login"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('auth_token', response.token);",
                  "    pm.test('Login successful', () => {",
                  "        pm.expect(response.token).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"name\": \"New User\",\n  \"role\": \"USER\"\n}"
            },
            "url": "{{base_url}}/auth/register"
          }
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/auth/profile"
          }
        }
      ]
    },
    {
      "name": "Vendors",
      "item": [
        {
          "name": "Create Vendor",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Solutions Ltd\",\n  \"email\": \"contact@acme.com\",\n  \"phone\": \"+1-555-0199\",\n  \"address\": \"456 Business Ave, New York, NY 10001\",\n  \"contactName\": \"Alice Johnson\",\n  \"status\": \"ACTIVE\"\n}"
            },
            "url": "{{base_url}}/vendors"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('vendor_id', response.data.id);",
                  "    pm.test('Vendor created successfully', () => {",
                  "        pm.expect(response.data.id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Vendors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vendors?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["vendors"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Vendor by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/vendors/{{vendor_id}}"
          }
        },
        {
          "name": "Update Vendor",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Acme Solutions Updated\",\n  \"phone\": \"+1-555-0200\"\n}"
            },
            "url": "{{base_url}}/vendors/{{vendor_id}}"
          }
        },
        {
          "name": "Search Vendors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/vendors?search=tech&status=ACTIVE",
              "host": ["{{base_url}}"],
              "path": ["vendors"],
              "query": [
                {
                  "key": "search",
                  "value": "tech"
                },
                {
                  "key": "status",
                  "value": "ACTIVE"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Payments",
      "item": [
        {
          "name": "Create Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": 1250.75,\n  \"description\": \"Monthly service fee for Q1 2025\",\n  \"vendorId\": \"{{vendor_id}}\",\n  \"dueDate\": \"2025-02-15T00:00:00Z\",\n  \"status\": \"PENDING\"\n}"
            },
            "url": "{{base_url}}/payments"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('payment_id', response.data.id);",
                  "    pm.test('Payment created successfully', () => {",
                  "        pm.expect(response.data.id).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/payments?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["payments"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Payment by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/payments/{{payment_id}}"
          }
        },
        {
          "name": "Get Payments by Vendor",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/payments/vendor/{{vendor_id}}"
          }
        },
        {
          "name": "Update Payment (Mark as Paid)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"PAID\",\n  \"paymentDate\": \"2025-01-07T14:30:00Z\"\n}"
            },
            "url": "{{base_url}}/payments/{{payment_id}}"
          }
        },
        {
          "name": "Filter Payments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/payments?status=PENDING&sortBy=amount&sortOrder=desc",
              "host": ["{{base_url}}"],
              "path": ["payments"],
              "query": [
                {
                  "key": "status",
                  "value": "PENDING"
                },
                {
                  "key": "sortBy",
                  "value": "amount"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                }
              ]
            }
          }
        },
        {
          "name": "Payment Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{base_url}}/payments/stats/overview"
          }
        }
      ]
    },
    {
      "name": "Error Testing",
      "item": [
        {
          "name": "Invalid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token"
              }
            ],
            "url": "{{base_url}}/vendors"
          }
        },
        {
          "name": "Duplicate Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Duplicate Vendor\",\n  \"email\": \"supplier1@example.com\"\n}"
            },
            "url": "{{base_url}}/vendors"
          }
        },
        {
          "name": "Invalid Payment Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": -100,\n  \"vendorId\": \"invalid_id\"\n}"
            },
            "url": "{{base_url}}/payments"
          }
        }
      ]
    }
  ]
}
